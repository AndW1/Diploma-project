// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TaskManager.Models;

namespace TaskManager.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190402104902_Image")]
    partial class Image
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.Models.BoardTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BackgroundImage")
                        .HasColumnName("background_image");

                    b.Property<string>("ContentTask")
                        .IsRequired()
                        .HasColumnName("content_task");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnName("date_finished")
                        .HasColumnType("datetime");

                    b.Property<long>("IdOwner")
                        .HasColumnName("id_owner");

                    b.Property<string>("NameTask")
                        .IsRequired()
                        .HasColumnName("name_task")
                        .HasMaxLength(100);

                    b.Property<bool?>("TaskCreated")
                        .HasColumnName("task_created");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner");

                    b.ToTable("BoardTasks");
                });

            modelBuilder.Entity("TaskManager.Models.NodeStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BackgroundImage")
                        .HasColumnName("path_file");

                    b.Property<string>("ContentNode")
                        .IsRequired()
                        .HasColumnName("content_node");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnName("date_finished")
                        .HasColumnType("datetime");

                    b.Property<long>("IdOwner")
                        .HasColumnName("id_owner");

                    b.Property<bool?>("NodeCreated")
                        .HasColumnName("node_created");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner");

                    b.ToTable("NodeStages");
                });

            modelBuilder.Entity("TaskManager.Models.SomeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Data1")
                        .HasColumnName("data1");

                    b.Property<string>("Data2")
                        .HasColumnName("data2");

                    b.HasKey("Id");

                    b.ToTable("SomeDatas");
                });

            modelBuilder.Entity("TaskManager.Models.StageTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BackgroundImage")
                        .HasColumnName("background_image");

                    b.Property<string>("ContentStage")
                        .IsRequired()
                        .HasColumnName("content_stage");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnName("date_finished")
                        .HasColumnType("datetime");

                    b.Property<long>("IdOwner")
                        .HasColumnName("id_owner");

                    b.Property<string>("NameStage")
                        .HasColumnName("name_stage")
                        .HasMaxLength(100);

                    b.Property<bool?>("StageCreated")
                        .HasColumnName("stage_created");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner");

                    b.ToTable("StageTasks");
                });

            modelBuilder.Entity("TaskManager.Models.UserApp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("DateApp")
                        .HasColumnName("date_app")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateJava")
                        .HasColumnName("date_java")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(100);

                    b.Property<bool?>("GroupStatus")
                        .HasColumnName("group_status");

                    b.Property<long?>("IdJava")
                        .HasColumnName("id_java");

                    b.Property<int>("IdRole")
                        .HasColumnName("id_role");

                    b.Property<string>("ImagePath")
                        .HasColumnName("image_path");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(100);

                    b.Property<string>("Upassword")
                        .IsRequired()
                        .HasColumnName("upassword")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("UserApps");
                });

            modelBuilder.Entity("TaskManager.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("IdRole")
                        .HasColumnName("id_role");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TaskManager.Models.BoardTask", b =>
                {
                    b.HasOne("TaskManager.Models.UserApp", "IdOwnerNavigation")
                        .WithMany("BoardTask")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.Models.NodeStage", b =>
                {
                    b.HasOne("TaskManager.Models.StageTask", "IdOwnerNavigation")
                        .WithMany("NodeStage")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.Models.StageTask", b =>
                {
                    b.HasOne("TaskManager.Models.BoardTask", "IdOwnerNavigation")
                        .WithMany("StageTask")
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.Models.UserApp", b =>
                {
                    b.HasOne("TaskManager.Models.UserRole", "IdRoleNavigation")
                        .WithMany("UserApp")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
